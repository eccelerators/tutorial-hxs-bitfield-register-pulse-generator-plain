-- Copyright (C) 2024 Eccelerators GmbH
-- 
-- This code was generated by:
--
-- HxS Compiler v0.0.0-0000000
-- VHDL Extension for HxS v0.0.0-0000000
-- 
-- Further information at https://eccelerators.com/hxs
-- 
-- Changes to this file may cause incorrect behavior and will be lost if the
-- code is regenerated.
library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;

use work.PulseGeneratorPlainIfcPackage.all;

entity PulseGeneratorPlainBlk_PulseGeneratorPlainIfc is
	port (
		Clk : in std_logic;
		Rst : in std_logic;
		ReadMatch : out std_logic;
		ReadAck : out std_logic;
		ReadData : out std_logic_vector(31 downto 0);
		ReadResp : out std_logic_vector(1 downto 0);
		Read : in std_logic;
		ReadAddressMatch : in std_logic;
		ReadAddressProt : in std_logic_vector(2 downto 0);
		ReadAddress : in std_logic_vector(15 downto 0);
		WriteMatch : out std_logic;
		WriteAck : out std_logic;
		WriteResp : out std_logic_vector(1 downto 0);
		Write : in std_logic;
		WriteAddrMatch : in std_logic;
		WriteAddressProt : in std_logic_vector(2 downto 0);
		WriteAddress : in std_logic_vector(15 downto 0);
		WriteData : in std_logic_vector(31 downto 0);
		WriteByteEnable : in std_logic_vector(3 downto 0);
		Operation : out std_logic_vector(1 downto 0);
		PulseWidthNs : out std_logic_vector(23 downto 0);
		PulsePeriodNs : out std_logic_vector(23 downto 0)
	);
end;

architecture Behavioural of PulseGeneratorPlainBlk_PulseGeneratorPlainIfc is

	signal PreReadData : std_logic_vector(31 downto 0);
	
	signal PreReadDataControlReg : std_logic_vector(25 downto 0);
	signal PreOrReadDataControlReg : std_logic_vector(31 downto 0);
	signal PreReadAckControlReg : std_logic;
	signal ReadDiffControlReg : std_logic;
	signal PreWriteAckControlReg : std_logic;
	signal WriteDiffControlReg : std_logic;
	signal WRegOperation : std_logic_vector(1 downto 0);
	signal WRegPulseWidthNs : std_logic_vector(23 downto 0);
	signal PreMatchReadControlReg : std_logic;
	signal PreMatchWriteControlReg : std_logic;
	
	signal PreReadDataParameterReg : std_logic_vector(23 downto 0);
	signal PreOrReadDataParameterReg : std_logic_vector(31 downto 0);
	signal PreReadAckParameterReg : std_logic;
	signal ReadDiffParameterReg : std_logic;
	signal PreWriteAckParameterReg : std_logic;
	signal WriteDiffParameterReg : std_logic;
	signal WRegPulsePeriodNs : std_logic_vector(23 downto 0);
	signal PreMatchReadParameterReg : std_logic;
	signal PreMatchWriteParameterReg : std_logic;

begin

	ReadMatch <= PreMatchReadControlReg
			or PreMatchReadParameterReg;
	
	WriteMatch <= PreMatchWriteControlReg
			or PreMatchWriteParameterReg;
	
	ReadAck <= PreReadAckControlReg
			or PreReadAckParameterReg;
	
	WriteAck <= PreWriteAckControlReg
			or PreWriteAckParameterReg;
	
	ReadData <= PreReadData;
	
	ReadResp <= (others => '0');
	WriteResp <= (others => '0');
	
	PreOrReadDataControlReg <= "000000" & PreReadDataControlReg
		when (PreMatchReadControlReg = '1' and PreReadAckControlReg = '1')
		else (others => '0');
	
	PreOrReadDataParameterReg <= x"00" & PreReadDataParameterReg
		when (PreMatchReadParameterReg = '1' and PreReadAckParameterReg = '1')
		else (others => '0');
	
	PreReadData <= PreOrReadDataControlReg
		or PreOrReadDataParameterReg;
	
	PreMatchReadControlRegProcess : process (ReadAddress, ReadAddressMatch)
	begin
		if (unsigned(ReadAddress) >= unsigned(CONTROLREG_ADDRESS) and
			unsigned(ReadAddress) <= unsigned(CONTROLREG_ADDRESS) + 3) then
			PreMatchReadControlReg <= ReadAddressMatch;
		else
			PreMatchReadControlReg <= '0';
		end if;
	end process;
	
	PreMatchWriteControlRegProcess : process (WriteAddress, WriteAddrMatch)
	begin
		if (unsigned(WriteAddress) >= unsigned(CONTROLREG_ADDRESS) and
			unsigned(WriteAddress) <= unsigned(CONTROLREG_ADDRESS) + 3) then
			PreMatchWriteControlReg <= WriteAddrMatch;
		else
			PreMatchWriteControlReg <= '0';
		end if;
	end process;
	
	WriteDiffControlRegProcess : process (WriteAddress, Write, PreWriteAckControlReg)
	begin
		if (unsigned(WriteAddress) >= unsigned(CONTROLREG_ADDRESS) and
			unsigned(WriteAddress) <= unsigned(CONTROLREG_ADDRESS) + 3) then
			WriteDiffControlReg <= Write and not PreWriteAckControlReg;
		else
			WriteDiffControlReg <= '0';
		end if;
	end process;
	
	ReadDiffControlRegProcess : process (ReadAddress, Read, PreReadAckControlReg)
	begin
		if (unsigned(ReadAddress) >= unsigned(CONTROLREG_ADDRESS) and
			unsigned(ReadAddress) <= unsigned(CONTROLREG_ADDRESS) + 3) then
			ReadDiffControlReg <= Read and not PreReadAckControlReg;
		else
			ReadDiffControlReg <= '0';
		end if;
	end process;
	
	SyncDomainControlReg : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckControlReg <= '0';
			PreWriteAckControlReg <= '0';
			WRegOperation <= CLEARED;
			WRegPulseWidthNs <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckControlReg <= WriteDiffControlReg;
			PreReadAckControlReg <= ReadDiffControlReg;
			if (WriteDiffControlReg = '1') then
				if (WriteByteEnable(2) = '1') then WRegPulseWidthNs(23 downto 16) <= WriteData(23 downto 16); end if;
				if (WriteByteEnable(1) = '1') then WRegPulseWidthNs(15 downto 8) <= WriteData(15 downto 8); end if;
				if (WriteByteEnable(0) = '1') then WRegPulseWidthNs(7 downto 0) <= WriteData(7 downto 0); end if;
				if (WriteByteEnable(3) = '1') then WRegOperation(1 downto 0) <= WriteData(25 downto 24); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxControlReg : process (
		WRegOperation,
		WRegPulseWidthNs
	) begin
		PreReadDataControlReg <= (others => '0');
		PreReadDataControlReg(25 downto 24) <= WRegOperation;
		PreReadDataControlReg(23 downto 0) <= WRegPulseWidthNs;
	end process;
	
	Operation <= WRegOperation;
	PulseWidthNs <= WRegPulseWidthNs;
	
	PreMatchReadParameterRegProcess : process (ReadAddress, ReadAddressMatch)
	begin
		if (unsigned(ReadAddress) >= unsigned(PARAMETERREG_ADDRESS) and
			unsigned(ReadAddress) <= unsigned(PARAMETERREG_ADDRESS) + 2) then
			PreMatchReadParameterReg <= ReadAddressMatch;
		else
			PreMatchReadParameterReg <= '0';
		end if;
	end process;
	
	PreMatchWriteParameterRegProcess : process (WriteAddress, WriteAddrMatch)
	begin
		if (unsigned(WriteAddress) >= unsigned(PARAMETERREG_ADDRESS) and
			unsigned(WriteAddress) <= unsigned(PARAMETERREG_ADDRESS) + 2) then
			PreMatchWriteParameterReg <= WriteAddrMatch;
		else
			PreMatchWriteParameterReg <= '0';
		end if;
	end process;
	
	WriteDiffParameterRegProcess : process (WriteAddress, Write, PreWriteAckParameterReg)
	begin
		if (unsigned(WriteAddress) >= unsigned(PARAMETERREG_ADDRESS) and
			unsigned(WriteAddress) <= unsigned(PARAMETERREG_ADDRESS) + 2) then
			WriteDiffParameterReg <= Write and not PreWriteAckParameterReg;
		else
			WriteDiffParameterReg <= '0';
		end if;
	end process;
	
	ReadDiffParameterRegProcess : process (ReadAddress, Read, PreReadAckParameterReg)
	begin
		if (unsigned(ReadAddress) >= unsigned(PARAMETERREG_ADDRESS) and
			unsigned(ReadAddress) <= unsigned(PARAMETERREG_ADDRESS) + 2) then
			ReadDiffParameterReg <= Read and not PreReadAckParameterReg;
		else
			ReadDiffParameterReg <= '0';
		end if;
	end process;
	
	SyncDomainParameterReg : process (Clk, Rst)
	begin
		if (Rst = '1') then
			PreReadAckParameterReg <= '0';
			PreWriteAckParameterReg <= '0';
			WRegPulsePeriodNs <= (others => '0');
		elsif rising_edge(Clk) then
			PreWriteAckParameterReg <= WriteDiffParameterReg;
			PreReadAckParameterReg <= ReadDiffParameterReg;
			if (WriteDiffParameterReg = '1') then
				if (WriteByteEnable(2) = '1') then WRegPulsePeriodNs(23 downto 16) <= WriteData(23 downto 16); end if;
				if (WriteByteEnable(1) = '1') then WRegPulsePeriodNs(15 downto 8) <= WriteData(15 downto 8); end if;
				if (WriteByteEnable(0) = '1') then WRegPulsePeriodNs(7 downto 0) <= WriteData(7 downto 0); end if;
			end if;
		end if;
	end process;
	
	DataOutPreMuxParameterReg : process (
		WRegPulsePeriodNs
	) begin
		PreReadDataParameterReg <= (others => '0');
		PreReadDataParameterReg(23 downto 0) <= WRegPulsePeriodNs;
	end process;
	
	PulsePeriodNs <= WRegPulsePeriodNs;
	
end;

library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;

entity PulseGeneratorPlainIfcAxi4LiteBusController is
	generic (
		CLOCKS_UNTIL_CYCLE_TIMEOUT : integer := 1023
	);
	port(
		Clk : in std_logic;
		Rst : in std_logic;
		AWVALID : in std_logic;
		AWADDR : in std_logic_vector(15 downto 0);
		AWPROT : in std_logic_vector(2 downto 0);
		AWREADY : out std_logic;
		WVALID : in std_logic;
		WDATA : in std_logic_vector(31 downto 0);
		WSTRB : in std_logic_vector(3 downto 0);
		WREADY : out std_logic;
		BREADY : in std_logic;
		BVALID : out std_logic;
		BRESP : out std_logic_vector(1 downto 0);
		ARVALID : in std_logic;
		ARADDR : in std_logic_vector(15 downto 0);
		ARPROT : in std_logic_vector(2 downto 0);
		ARREADY : out std_logic;
		RREADY : in std_logic;
		RVALID : out std_logic;
		RDATA : out std_logic_vector(31 downto 0);
		RRESP : out std_logic_vector(1 downto 0);
		WritePrivileged : out std_logic;
		WriteSecure : out std_logic;
		WriteInstruction : out std_logic;
		ReadPrivileged : out std_logic;
		ReadSecure : out std_logic;
		ReadInstruction : out std_logic;
		ReadMatch : in std_logic;
		ReadAck : in std_logic;
		ReadData : in std_logic_vector(31 downto 0);
		ReadResp : in std_logic_vector(1 downto 0);
		Read : out std_logic;
		ReadAddressMatch : out std_logic;
		ReadAddressProt : out std_logic_vector(2 downto 0);
		ReadAddress : out std_logic_vector(15 downto 0);
		WriteMatch : in std_logic;
		WriteAck : in std_logic;
		WriteResp : in std_logic_vector(1 downto 0);
		Write : out std_logic;
		WriteAddrMatch : out std_logic;
		WriteAddressProt : out std_logic_vector(2 downto 0);
		WriteAddress : out std_logic_vector(15 downto 0);
		WriteData : out std_logic_vector(31 downto 0);
		WriteByteEnable : out std_logic_vector(3 downto 0);
		UnoccupiedAck : out std_logic;
		TimeoutAck : out std_logic
	);
end;

architecture Behavioural of PulseGeneratorPlainIfcAxi4LiteBusController is

	type T_Axi4LiteWriteState is (
		Axi4LiteWriteStateIdle,
		Axi4LiteWriteStateAddress,
		Axi4LiteWriteStateData,
		Axi4LiteWriteStateResp,
		Axi4LiteWriteStateErrorResp,
		Axi4LiteWriteStateDone
	);

	type T_Axi4LiteReadState is (
		Axi4LiteReadStateIdle,
		Axi4LiteReadStateAddress,
		Axi4LiteReadStateData,
		Axi4LiteReadStateDone
	);
	
	function get_num_bits (arg : natural) return natural is
		variable nbits : natural;
		variable n : natural;
	begin
		n := arg;
		nbits := 1;
		while n > 1 loop
			nbits := nbits + 1;
			n := n / 2;
		end loop;
		return nbits;
	end function;
	
	constant TimeoutCounterWidth : integer := get_num_bits(CLOCKS_UNTIL_CYCLE_TIMEOUT);
	constant TimeoutCounterLeft : integer := TimeoutCounterWidth - 1;

	signal Axi4LiteReadState : T_Axi4LiteReadState;
	signal Axi4LiteWriteState : T_Axi4LiteWriteState;

	signal ReadTimeoutCounter : unsigned(TimeoutCounterLeft downto 0) := to_unsigned(CLOCKS_UNTIL_CYCLE_TIMEOUT, TimeoutCounterWidth);
	signal WriteTimeoutCounter : unsigned(TimeoutCounterLeft downto 0) := to_unsigned(CLOCKS_UNTIL_CYCLE_TIMEOUT, TimeoutCounterWidth);

	signal ReadUnoccupiedAck : std_logic;
	signal WriteUnoccupiedAck : std_logic;
	signal ReadTimeoutAck : std_logic;
	signal WriteTimeoutAck : std_logic;
	
	signal ReadProtect : std_logic_vector(2 downto 0);
	signal WriteProtect : std_logic_vector(2 downto 0);

begin

	UnoccupiedAck <= ReadUnoccupiedAck or WriteUnoccupiedAck;
	TimeoutAck <= ReadTimeoutAck or WriteTimeoutAck;

	WritePrivileged <= WriteProtect(0);
	WriteSecure <= WriteProtect(1);
	WriteInstruction <= WriteProtect(2);
	ReadPrivileged <= ReadProtect(0);
	ReadSecure <= ReadProtect(1);
	ReadInstruction <= ReadProtect(2);
	
	WriteAddressProt <= WriteProtect;
	ReadAddressProt <= ReadProtect;

	Axi4LiteRead : process(Clk, Rst) is
	begin
		if Rst = '1' then
			ARREADY <= '0';
			RVALID <= '0';
			RDATA <= (others => '0');
			RRESP <= (others => '0');
			Read <= '0';
			ReadAddressMatch <= '0';
			ReadAddress <= (others => '0');
			ReadProtect <= (others => '0');
			ReadUnoccupiedAck <= '0';
			ReadTimeoutAck <= '0';
			ReadTimeoutCounter <= to_unsigned(CLOCKS_UNTIL_CYCLE_TIMEOUT, TimeoutCounterWidth);
			Axi4LiteReadState <= Axi4LiteReadStateIdle;
		elsif rising_edge(Clk) then
			ARREADY <= '0';
			RVALID <= '0';
			case Axi4LiteReadState is
				when Axi4LiteReadStateIdle =>
					ReadUnoccupiedAck <= '0';
					ReadTimeoutAck <= '0';
					ReadTimeoutCounter <= to_unsigned(CLOCKS_UNTIL_CYCLE_TIMEOUT, TimeoutCounterWidth);
					Read <= '0';
					ReadAddressMatch <= '0';
					ReadAddress <= (others => '0');
					ReadProtect <= (others => '0');
					if ARVALID = '1' then
						ReadAddress <= ARADDR;
						ReadProtect <= ARPROT;
						ReadAddressMatch <= '1';
						Axi4LiteReadState <= Axi4LiteReadStateAddress;
					end if;
				when Axi4LiteReadStateAddress =>
					ARREADY <= '1';
					Axi4LiteReadState <= Axi4LiteReadStateData;
					if ReadMatch = '1' then
						Read <= '1';
					else
						ReadUnoccupiedAck <= '1';
					end if;
				when Axi4LiteReadStateData =>
					ReadTimeoutCounter <= ReadTimeoutCounter - 1;
					RDATA <= ReadData;
					RRESP <= ReadResp;
					if ReadAck = '1' then
						ReadAddressMatch <= '0';
						RVALID <= '1';
						Axi4LiteReadState <= Axi4LiteReadStateDone;
					end if;
					if ReadUnoccupiedAck = '1' then
						RRESP <= "11";
						RVALID <= '1';
						ReadAddressMatch <= '0';
						Axi4LiteReadState <= Axi4LiteReadStateDone;
					end if;
					if ReadTimeoutCounter = 0 then
						ReadTimeoutAck <= '1';
						RRESP <= "10";
						RVALID <= '1';
						ReadAddressMatch <= '0';
						Axi4LiteReadState <= Axi4LiteReadStateDone;
					end if;
				when Axi4LiteReadStateDone =>
					RVALID <= '1';
					if RREADY = '1' then
						RVALID <= '0';
						ReadAddress <= (others => '0');
						ReadProtect <= (others => '0');
						RRESP <= (others => '0');
						Read <= '0';
						Axi4LiteReadState <= Axi4LiteReadStateIdle;
					end if;
			end case;
		end if;
	end process;

	Axi4LiteWrite : process(Clk, Rst) is
	begin
		if Rst = '1' then
			AWREADY <= '0';
			WREADY <= '0';
			BVALID <= '0';
			BRESP <= (others => '0');
			Write <= '0';
			WriteAddrMatch <= '0';
			WriteAddress <= (others => '0');
			WriteProtect <= (others => '0');
			WriteData <= (others => '0');
			WriteByteEnable <= (others => '0');
			WriteUnoccupiedAck <= '0';
			WriteTimeoutAck <= '0';
			WriteTimeoutCounter <= to_unsigned(CLOCKS_UNTIL_CYCLE_TIMEOUT, TimeoutCounterWidth);
			Axi4LiteWriteState <= Axi4LiteWriteStateIdle;
		elsif rising_edge(Clk) then
			AWREADY <= '0';
			WREADY <= '0';
			BVALID <= '0';
			case Axi4LiteWriteState is
				when Axi4LiteWriteStateIdle =>
					WriteUnoccupiedAck <= '0';
					WriteTimeoutAck <= '0';
					WriteTimeoutCounter <= to_unsigned(CLOCKS_UNTIL_CYCLE_TIMEOUT, TimeoutCounterWidth);
					Write <= '0';
					WriteAddrMatch <= '0';
					WriteAddress <= (others => '0');
					WriteProtect <= (others => '0');
					if AWVALID = '1' then
						WriteAddress <= AWADDR;
						WriteProtect <= AWPROT;
						WriteAddrMatch <= '1';
						Axi4LiteWriteState <= Axi4LiteWriteStateAddress;
					end if;
				when Axi4LiteWriteStateAddress =>
					AWREADY <= '1';
					WREADY <= '1';
					Axi4LiteWriteState <= Axi4LiteWriteStateData;
					if WriteMatch = '0' then
						WriteUnoccupiedAck <= '1';
					end if;
				when Axi4LiteWriteStateData =>
					WREADY <= '1';
					WriteData <= WDATA;
					WriteByteEnable <= WSTRB;
					if WVALID = '1' then
						WREADY <= '0';
						if WriteUnoccupiedAck = '0' then
							Write <= '1';
							Axi4LiteWriteState <= Axi4LiteWriteStateResp;
						else
							Axi4LiteWriteState <= Axi4LiteWriteStateErrorResp;
						end if;
					end if;
				when Axi4LiteWriteStateResp =>
					WriteTimeoutCounter <= WriteTimeoutCounter - 1;
					Write <= '1';
					BRESP <= WriteResp;
					if WriteAck = '1' then
						Write <= '0';
						WriteAddrMatch <= '0';
						BVALID <= '1';
						Axi4LiteWriteState <= Axi4LiteWriteStateDone;
					end if;
					if WriteTimeoutCounter = 0 then
						WriteTimeoutAck <= '1';
						Write <= '0';
						WriteAddrMatch <= '0';
						Axi4LiteWriteState <= Axi4LiteWriteStateErrorResp;
					end if;
				when Axi4LiteWriteStateErrorResp =>
					Write <= '0';
					WriteAddrMatch <= '0';
					BVALID <= '1';
					Axi4LiteWriteState <= Axi4LiteWriteStateDone;
					if WriteUnoccupiedAck = '1' then
						BRESP <= "11";
					else
						BRESP <= "10";
					end if;
				when Axi4LiteWriteStateDone =>
					BVALID <= '1';
					if BREADY = '1' then
						WriteAddress <= (others => '0');
						WriteProtect <= (others => '0');
						BVALID <= '0';
						BRESP <= (others => '0');
						Axi4LiteWriteState <= Axi4LiteWriteStateIdle;
					end if;
			end case;
		end if;
	end process;

end;

library ieee;
	use ieee.std_logic_1164.all;
	use ieee.numeric_std.all;

use work.PulseGeneratorPlainIfcPackage.all;

entity PulseGeneratorPlainIfcAxi4Lite is
	generic (
		CLOCKS_UNTIL_CYCLE_TIMEOUT : integer := 1023
	);
	port (
		Clk : in std_logic;
		Rst : in std_logic;
		Axi4LiteDown : in T_PulseGeneratorPlainIfcAxi4LiteDown;
		Axi4LiteUp : out T_PulseGeneratorPlainIfcAxi4LiteUp;
		Axi4LiteAccess : out T_PulseGeneratorPlainIfcAxi4LiteAccess;
		Trace : out T_PulseGeneratorPlainIfcAxi4LiteTrace;
		PulseGeneratorPlainBlkDown : out T_PulseGeneratorPlainIfcPulseGeneratorPlainBlkDown
	);
end;

architecture Behavioural of PulseGeneratorPlainIfcAxi4Lite is

	signal PreAxi4LiteUp : T_PulseGeneratorPlainIfcAxi4LiteUp;
	signal PreAxi4LiteAccess : T_PulseGeneratorPlainIfcAxi4LiteAccess;
	
	signal UnoccupiedAck : std_logic;
	signal TimeoutAck : std_logic;
	
	signal ReadMatch : std_logic;
	signal ReadAck : std_logic;
	signal ReadData : std_logic_vector(31 downto 0);
	signal ReadResp : std_logic_vector(1 downto 0);
	signal Read : std_logic;
	signal ReadAddressMatch : std_logic;
	signal ReadAddressProt : std_logic_vector(2 downto 0);
	signal ReadAddress : std_logic_vector(15 downto 0);
	signal WriteMatch : std_logic;
	signal WriteAck : std_logic;
	signal WriteResp : std_logic_vector(1 downto 0);
	signal Write : std_logic;
	signal WriteAddrMatch : std_logic;
	signal WriteAddressProt : std_logic_vector(2 downto 0);
	signal WriteAddress : std_logic_vector(15 downto 0);
	signal WriteData : std_logic_vector(31 downto 0);
	signal WriteByteEnable : std_logic_vector(3 downto 0);
	
	signal PulseGeneratorPlainBlkReadMatch : std_logic;
	signal PulseGeneratorPlainBlkReadAck : std_logic;
	signal PulseGeneratorPlainBlkReadData : std_logic_vector(31 downto 0);
	signal PulseGeneratorPlainBlkReadResp : std_logic_vector(1 downto 0);
	signal PulseGeneratorPlainBlkWriteMatch : std_logic;
	signal PulseGeneratorPlainBlkWriteAck : std_logic;
	signal PulseGeneratorPlainBlkWriteResp : std_logic_vector(1 downto 0);

begin

	i_PulseGeneratorPlainIfcAxi4LiteBusController : entity work.PulseGeneratorPlainIfcAxi4LiteBusController
		generic map (
			CLOCKS_UNTIL_CYCLE_TIMEOUT => CLOCKS_UNTIL_CYCLE_TIMEOUT
		)
		port map (
			Clk => Clk,
			Rst => Rst,
			AWVALID => Axi4LiteDown.AWVALID,
			AWADDR => Axi4LiteDown.AWADDR,
			AWPROT => Axi4LiteDown.AWPROT,
			AWREADY => PreAxi4LiteUp.AWREADY,
			WVALID => Axi4LiteDown.WVALID,
			WDATA => Axi4LiteDown.WDATA,
			WSTRB => Axi4LiteDown.WSTRB,
			WREADY => PreAxi4LiteUp.WREADY,
			BREADY => Axi4LiteDown.BREADY,
			BVALID => PreAxi4LiteUp.BVALID,
			BRESP => PreAxi4LiteUp.BRESP,
			ARVALID => Axi4LiteDown.ARVALID,
			ARADDR => Axi4LiteDown.ARADDR,
			ARPROT => Axi4LiteDown.ARPROT,
			ARREADY => PreAxi4LiteUp.ARREADY,
			RREADY => Axi4LiteDown.RREADY,
			RVALID => PreAxi4LiteUp.RVALID,
			RDATA => PreAxi4LiteUp.RDATA,
			RRESP => PreAxi4LiteUp.RRESP,
			WritePrivileged => PreAxi4LiteAccess.WritePrivileged,
			WriteSecure => PreAxi4LiteAccess.WriteSecure,
			WriteInstruction => PreAxi4LiteAccess.WriteInstruction,
			ReadPrivileged => PreAxi4LiteAccess.ReadPrivileged,
			ReadSecure => PreAxi4LiteAccess.ReadSecure,
			ReadInstruction => PreAxi4LiteAccess.ReadInstruction,
			ReadMatch => ReadMatch,
			ReadAck => ReadAck,
			ReadData => ReadData,
			ReadResp => ReadResp,
			Read => Read,
			ReadAddressMatch => ReadAddressMatch,
			ReadAddressProt => ReadAddressProt,
			ReadAddress => ReadAddress,
			WriteMatch => WriteMatch,
			WriteAck => WriteAck,
			WriteResp => WriteResp,
			Write => Write,
			WriteAddrMatch => WriteAddrMatch,
			WriteAddressProt => WriteAddressProt,
			WriteAddress => WriteAddress,
			WriteData => WriteData,
			WriteByteEnable => WriteByteEnable,
			UnoccupiedAck => UnoccupiedAck,
			TimeoutAck => TimeoutAck
		);
	
	i_PulseGeneratorPlainBlk_PulseGeneratorPlainIfc : entity work.PulseGeneratorPlainBlk_PulseGeneratorPlainIfc
		port map (
			Clk => Clk,
			Rst => Rst,
			ReadMatch => PulseGeneratorPlainBlkReadMatch,
			ReadAck => PulseGeneratorPlainBlkReadAck,
			ReadData => PulseGeneratorPlainBlkReadData,
			ReadResp => PulseGeneratorPlainBlkReadResp,
			Read => Read,
			ReadAddressMatch => ReadAddressMatch,
			ReadAddressProt => ReadAddressProt,
			ReadAddress => ReadAddress,
			WriteMatch => PulseGeneratorPlainBlkWriteMatch,
			WriteAck => PulseGeneratorPlainBlkWriteAck,
			WriteResp => PulseGeneratorPlainBlkWriteResp,
			Write => Write,
			WriteAddrMatch => WriteAddrMatch,
			WriteAddressProt => WriteAddressProt,
			WriteAddress => WriteAddress,
			WriteData => WriteData,
			WriteByteEnable => WriteByteEnable,
			Operation => PulseGeneratorPlainBlkDown.Operation,
			PulseWidthNs => PulseGeneratorPlainBlkDown.PulseWidthNs,
			PulsePeriodNs => PulseGeneratorPlainBlkDown.PulsePeriodNs
		);
	
	Axi4LiteUp <= PreAxi4LiteUp;
	Axi4LiteAccess <= PreAxi4LiteAccess;
	
	Trace.Axi4LiteDown <= Axi4LiteDown;
	Trace.Axi4LiteUp <= PreAxi4LiteUp;
	Trace.Axi4LiteAccess <= PreAxi4LiteAccess;
	Trace.UnoccupiedAck <= UnoccupiedAck;
	Trace.TimeoutAck <= TimeoutAck;
	
	ReadMatch <= PulseGeneratorPlainBlkReadMatch;
	ReadAck <= PulseGeneratorPlainBlkReadAck;
	ReadResp <= PulseGeneratorPlainBlkReadResp;
	ReadData <= PulseGeneratorPlainBlkReadData;
	WriteMatch <= PulseGeneratorPlainBlkWriteMatch;
	WriteAck <= PulseGeneratorPlainBlkWriteAck;
	WriteResp <= PulseGeneratorPlainBlkWriteResp;

end;
