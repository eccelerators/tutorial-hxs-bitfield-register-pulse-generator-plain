-- ******************************************************************************
-- 
--                   /------o
--             eccelerators
--          o------/
-- 
--  This file is an Eccelerators GmbH sample project.
-- 
--  MIT License:
--  Copyright (c) 2023 Eccelerators GmbH
-- 
--  Permission is hereby granted, free of charge, to any person obtaining a copy
--  of this software and associated documentation files (the "Software"), to deal
--  in the Software without restriction, including without limitation the rights
--  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
--  copies of the Software, and to permit persons to whom the Software is
--  furnished to do so, subject to the following conditions:
-- 
--  The above copyright notice and this permission notice shall be included in all
--  copies or substantial portions of the Software.
-- 
--  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
--  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
--  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
--  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
--  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
--  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
--  SOFTWARE.
-- ******************************************************************************

-- parameter
const ALLWAYS 0
const FAILURE 0
const ERROR 10
const WARNING 20
const INFO 30
const INFO_1 31
const INFO_2 32
const INFO_3 33
const INFO_4 34
const INFO_5 35

const SKIP 1    
const SKIPPED 1
const NOT_SKIPPED 0

signal sigInSimulatedTimeNow 0
var SimulatedTimeNow 0

signal sigInTestSuiteIndex 1
var TestSuiteIndex 255

signal sigInZero 2
var BasicZero 0

signal StandardTestErrorCount 3

var StandardTestErrorCountStartSnapShot 0
var StandardTestErrorCountResult 0

-- A standard test is usually wrapped by a 
--
--  call$ startStandardTestShell at its begin
--   producing a standard message that the test has been started
--   and recording the standard error counter state before the test
--
--  call$ endStandardTestShell at its end
--   producing a standard message that the test has ended successfully or with errors
--   returning the StandardTestErrorCountResult the number of errors occurred within the test shell
--
--  Each verify instruction with non success increments the StandardTestError count automatically.


startStandardTestShell:
proc
    -- record count of standard error count at shell begin
	signal read StandardTestErrorCount StandardTestErrorCountStartSnapShot
	log message 0 "{@c2} started" 
end proc	

endStandardTestShell:
proc
    -- record count of standard error count at shell end
	signal read StandardTestErrorCount StandardTestErrorCountResult
	sub StandardTestErrorCountResult $StandardTestErrorCountStartSnapShot
    if $StandardTestErrorCountResult > 0 
    	log message 0 "{@c2} ended with {:d} failures" $StandardTestErrorCountResult
    else 
    	log message 0 "{@c2} ended successfully"    
    end if	
end proc
	
-- manual method to increment the StandardTestErrorCount based on if instruction decisions	
incStandardTestErrorCount:
proc
	signal verify sigInZero BasicZero 1 1 
	-- fail intentionally thus incrementing standard error counter
	-- shown when a test ends with a finish instruction
end proc	
	